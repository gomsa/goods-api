// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/firm/firm.proto

package firm

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 数据库 Firms
type Firm struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	CreatedAt            string   `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Firm) Reset()         { *m = Firm{} }
func (m *Firm) String() string { return proto.CompactTextString(m) }
func (*Firm) ProtoMessage()    {}
func (*Firm) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c94f1a429adf36, []int{0}
}

func (m *Firm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Firm.Unmarshal(m, b)
}
func (m *Firm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Firm.Marshal(b, m, deterministic)
}
func (m *Firm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Firm.Merge(m, src)
}
func (m *Firm) XXX_Size() int {
	return xxx_messageInfo_Firm.Size(m)
}
func (m *Firm) XXX_DiscardUnknown() {
	xxx_messageInfo_Firm.DiscardUnknown(m)
}

var xxx_messageInfo_Firm proto.InternalMessageInfo

func (m *Firm) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Firm) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Firm) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Firm) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Firm) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ListQuery struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort                 string   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListQuery) Reset()         { *m = ListQuery{} }
func (m *ListQuery) String() string { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()    {}
func (*ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c94f1a429adf36, []int{1}
}

func (m *ListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListQuery.Unmarshal(m, b)
}
func (m *ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListQuery.Marshal(b, m, deterministic)
}
func (m *ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuery.Merge(m, src)
}
func (m *ListQuery) XXX_Size() int {
	return xxx_messageInfo_ListQuery.Size(m)
}
func (m *ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuery proto.InternalMessageInfo

func (m *ListQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type Request struct {
	ListQuery            *ListQuery `protobuf:"bytes,1,opt,name=list_query,json=listQuery,proto3" json:"list_query,omitempty"`
	Firm                 *Firm      `protobuf:"bytes,2,opt,name=Firm,proto3" json:"Firm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c94f1a429adf36, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetListQuery() *ListQuery {
	if m != nil {
		return m.ListQuery
	}
	return nil
}

func (m *Request) GetFirm() *Firm {
	if m != nil {
		return m.Firm
	}
	return nil
}

type Response struct {
	Firm                 *Firm    `protobuf:"bytes,1,opt,name=firm,proto3" json:"firm,omitempty"`
	Firms                []*Firm  `protobuf:"bytes,2,rep,name=firms,proto3" json:"firms,omitempty"`
	Valid                bool     `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0c94f1a429adf36, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetFirm() *Firm {
	if m != nil {
		return m.Firm
	}
	return nil
}

func (m *Response) GetFirms() []*Firm {
	if m != nil {
		return m.Firms
	}
	return nil
}

func (m *Response) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*Firm)(nil), "firm.Firm")
	proto.RegisterType((*ListQuery)(nil), "firm.ListQuery")
	proto.RegisterType((*Request)(nil), "firm.Request")
	proto.RegisterType((*Response)(nil), "firm.Response")
}

func init() { proto.RegisterFile("proto/firm/firm.proto", fileDescriptor_f0c94f1a429adf36) }

var fileDescriptor_f0c94f1a429adf36 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x4b, 0xfb, 0x30,
	0x18, 0xff, 0xf7, 0x6d, 0x5b, 0x9f, 0xf1, 0x9f, 0x10, 0x14, 0x8a, 0xa0, 0x94, 0x1e, 0x74, 0x5e,
	0x26, 0xcc, 0x4f, 0x30, 0xd4, 0x89, 0xb0, 0x8b, 0x01, 0x0f, 0x9e, 0x46, 0x67, 0x1e, 0x25, 0x90,
	0xae, 0x5d, 0x92, 0x89, 0x5e, 0xfd, 0x3a, 0x7e, 0x49, 0xc9, 0x93, 0x6e, 0xa0, 0x17, 0x7b, 0x69,
	0x7f, 0x6f, 0x7d, 0xf2, 0x4b, 0x52, 0x38, 0x6a, 0x74, 0x6d, 0xeb, 0xcb, 0x17, 0xa9, 0x2b, 0x7a,
	0x4c, 0x88, 0xb3, 0xd8, 0xe1, 0xe2, 0x33, 0x80, 0x78, 0x2e, 0x75, 0xc5, 0x46, 0x10, 0x4a, 0x91,
	0x05, 0x79, 0x30, 0x8e, 0x78, 0x28, 0x05, 0x63, 0x10, 0xaf, 0xcb, 0x0a, 0xb3, 0x30, 0x0f, 0xc6,
	0x29, 0x27, 0xcc, 0x32, 0xe8, 0x97, 0x42, 0x68, 0x34, 0x26, 0x8b, 0x48, 0xde, 0x51, 0x76, 0x02,
	0xf0, 0xac, 0xb1, 0xb4, 0x28, 0x96, 0xa5, 0xcd, 0x62, 0x32, 0xd3, 0x56, 0x99, 0x59, 0x67, 0x6f,
	0x1b, 0xb1, 0xb3, 0x13, 0x6f, 0xb7, 0xca, 0xcc, 0x16, 0xf7, 0x90, 0x2e, 0xa4, 0xb1, 0x0f, 0x5b,
	0xd4, 0x1f, 0xec, 0x10, 0x12, 0x25, 0x2b, 0x69, 0xdb, 0x2e, 0x9e, 0xb8, 0x3a, 0x4d, 0xf9, 0xea,
	0xeb, 0x44, 0x9c, 0xb0, 0xd3, 0x4c, 0xad, 0x6d, 0xdb, 0x85, 0x70, 0xf1, 0x04, 0x7d, 0x8e, 0x9b,
	0x2d, 0x1a, 0xcb, 0x26, 0x00, 0x4a, 0x1a, 0xbb, 0xdc, 0xb8, 0xb1, 0x34, 0x6d, 0x38, 0x3d, 0x98,
	0xd0, 0x09, 0xec, 0x57, 0xe3, 0xa9, 0xda, 0x2f, 0x7c, 0xea, 0x4f, 0x82, 0x96, 0x18, 0x4e, 0xc1,
	0x27, 0x9d, 0xc2, 0x49, 0x2f, 0x56, 0x30, 0xe0, 0x68, 0x9a, 0x7a, 0x6d, 0xd0, 0x65, 0x9d, 0xdd,
	0x4e, 0xfd, 0x91, 0x75, 0x90, 0xe5, 0x90, 0xb8, 0xb7, 0xc9, 0xc2, 0x3c, 0xfa, 0x15, 0xf0, 0x86,
	0xdb, 0xe6, 0x5b, 0xa9, 0xa4, 0xa0, 0xf6, 0x03, 0xee, 0xc9, 0xf4, 0x2b, 0x84, 0x64, 0x4e, 0xfe,
	0x18, 0x92, 0xdb, 0x77, 0x69, 0x2c, 0xfb, 0xef, 0xbf, 0x6d, 0x77, 0x75, 0x3c, 0xda, 0x51, 0xdf,
	0xa4, 0xf8, 0xc7, 0xce, 0x20, 0x9a, 0x29, 0xf5, 0x77, 0xee, 0x1c, 0xe2, 0x45, 0xd7, 0x81, 0x77,
	0xd8, 0x21, 0x77, 0x01, 0xbd, 0x6b, 0xba, 0xe2, 0x4e, 0xd1, 0x47, 0xba, 0xee, 0x4e, 0xd1, 0x1b,
	0x54, 0xd8, 0x21, 0xba, 0xea, 0xd1, 0x9f, 0x7c, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x96,
	0x8f, 0x88, 0xe2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Firms service

type FirmsClient interface {
	// 品牌是否存在
	Exist(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 全部商品公司
	All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 获取商品公司列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 根据 唯一 获取商品公司信息
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建商品公司
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新商品公司
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除商品公司
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type firmsClient struct {
	c           client.Client
	serviceName string
}

func NewFirmsClient(serviceName string, c client.Client) FirmsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "firm"
	}
	return &firmsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *firmsClient) Exist(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.Exist", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmsClient) All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.All", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmsClient) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmsClient) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmsClient) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmsClient) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmsClient) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Firms.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Firms service

type FirmsHandler interface {
	// 品牌是否存在
	Exist(context.Context, *Request, *Response) error
	// 全部商品公司
	All(context.Context, *Request, *Response) error
	// 获取商品公司列表
	List(context.Context, *Request, *Response) error
	// 根据 唯一 获取商品公司信息
	Get(context.Context, *Request, *Response) error
	// 创建商品公司
	Create(context.Context, *Request, *Response) error
	// 更新商品公司
	Update(context.Context, *Request, *Response) error
	// 删除商品公司
	Delete(context.Context, *Request, *Response) error
}

func RegisterFirmsHandler(s server.Server, hdlr FirmsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Firms{hdlr}, opts...))
}

type Firms struct {
	FirmsHandler
}

func (h *Firms) Exist(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.Exist(ctx, in, out)
}

func (h *Firms) All(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.All(ctx, in, out)
}

func (h *Firms) List(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.List(ctx, in, out)
}

func (h *Firms) Get(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.Get(ctx, in, out)
}

func (h *Firms) Create(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.Create(ctx, in, out)
}

func (h *Firms) Update(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.Update(ctx, in, out)
}

func (h *Firms) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.FirmsHandler.Delete(ctx, in, out)
}
